TTMS
TO DO LIST

*create subclass GameDayPlayer(User) as a light substitute for class User()
	*attributes: User.player_login_name, User.player_rank, self.players_played_already = [], self.last_played (as a datetime stamp), self.player_status ('playing' and 'reserve'. Default setting should probably be 'reserve')
	*add methods get_rank(self) and get_name(self)
*create function obtain_game_day_data() to select list of Users for the closest game date
*instantiate list of GameDayPlayer objects based on result of obtain_game_day_data()
*create function match_players() to match players based on their rank
*instantiate Match objects for list of GameDayPlayer objects with Match.status = 'inactive'
*create function load_match():
	*shuffle Match objects by using GameDay dedicated method 
	*select first 4 Match objects
	*load selected Match objects in admin.html. Ensure player_login_name is visible to the user, but GameDayPlayer object is visible to backend
*create function start_match() that changes Match.status to 'active' and GameDayPlayer.status to 'playing'
*create function enter_match_results()
	*Match.results = request.form.get('results')
	*Match.status = 'played'
	*Match.datetime_ended = datetime.now()
	*update_active_players() to update GameDayPlayer.time_last_played, GameDayPlayer.players_played_already and GameDayPlayer.status (to 'reserve')
*create class GameDay as container to hold:self.gameday_matches = [] and self.gameday_players = []
	*possibly ensure that there is a dynamic counter that keeps track of counts of 'playing' and 'reserve' GameDayPlayer objects and 'inactive'/'active'/'played' status of Match objects




















