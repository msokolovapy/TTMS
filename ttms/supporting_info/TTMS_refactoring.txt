#login_route.py

def obtain_player_info_from_login_page(request):
        player_email = request.form['player_email']
        password = request.form['password']
        return player_email, password

def find_user_in_database(player_email_address):
    return User.query.filter_by(player_email_address = player_email).first()


def check_failed(user_password, user):
     if not(user and bcrypt.check_password_hash(user.player_password, password)):
         return True

def update_session(user = None, gameday_data = None):
     if user:
          session['user_id'] = user.player_id
          session['user_role'] = user.player_role
          session['user_name'] = user.player_login_name
          session['player_rank'] = user.player_rank
     elif gameday_data:
        session['gameday_object'] = gameday_data.to_dict()  
      return

def initiate_matches():
    return GameDay()

def initiate_matches_and_update_session():
    gameday_data = initiate_matches()
    return update_session(gameday_data = gameday_data)

def display_message_on_page(message_str, message_type):
    flash(message_str,message_type)

def return_web_page(user):
    user_role =  user.get_role()
    try:
        return redirect(url_for(user_role))
    except:
        

def redirect_to_page(route):
    return redirect(url_for(route))

def get_user(request):
    user_email, user_password = obtain_player_info_from_login_page()
    user = find_user_in_database_by(user_email)
    





def login_and_store_data():
     user = get_user(request)
     if user.is_valid(user_password):
        update_session(user = user)
        if user.is_admin():
            initiate_matches_and_update_session()
        return_web_page(user)
            


obtain_and_store_user_data()

         redirect_to_route('admin')
     elif user_role_check_passed_for('user'):
         redirect_to_route('user')
     else:
         print('New user role found in database')



     
         
    