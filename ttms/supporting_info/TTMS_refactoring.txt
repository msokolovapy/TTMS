#create_match_by_system.py

@app.route('/admin/create_match_by_system', methods = ['GET','POST'])
def create_match_by_system():
    """This function receives player login names from an html form, creates match object, 
    updates match object status to 'played' and randomly selects any 'active' match from 
    gameday object's gameday_matches list to be displayed on html form 
    """
    player_1_login_name = request.form.get('player_1_login_name')
    player_2_login_name = request.form.get('player_2_login_name')
    admin_name = session.get('user_name')
    match_to_update = Match(player_1_login_name, player_2_login_name)
    
    matches = deserialize_('matches')
    counter_active_matches = matches.counter_active_matches()
    if counter_active_matches == 0:
        flash('No more matches planned for today. \
                    Please create a match manually via Edit button', 'info') 
        serialize_(matches)
        return render_template('admin.html',user_name = admin_name,
                                    four_matches_list = matches.to_display(),
                                     check_availability_matches = False)
    
    else:
        
return redirect(url_for('admin'), check_availability_matches = False)


@app.route('/admin'<ckeck_availability_matches>)
def admin(check_availability_matches):
    if login_checks_pass():
          admin_name,matches = obtain_info_from_(session)
          return build_web_page('admin', admin_name, matches.to_display(), check_availability_matches)
    return redirect_to_web_page('login')






def system_chooses_next_match():
    player_1_name, player_2_name, admin_name = obtain_user_input('create_match_by_system')
    matches = obtain_info_from_session('create_match_by_system')
    if no_more_prebooked_matches():
        display_flash_message_for('create_match_by_system')
        return build_web_page('admin',admin_name, matches.to_display(), check_availability_matches = False)
    else:
         match_to_update = Match(player_1_name, player_2_name)
         matches. update_match(match_to_update,match_status = 'played',match_html_display_status = False)
         any_active_match = matches.find_specified_match(match_status = 'active', match_html_display_status = False)
         matches.update_match(match_to_update=any_active_match, \
                                        match_html_display_status=True)
         serialize_(matches)
         return redirect(url_for('admin'))
    