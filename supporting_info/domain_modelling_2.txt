Heya, Not bad!

Point 1 is very well fleshed out but I think it might be beyond the scope of what's required (or at least might be beyond what we should probably work on). I'm also not sure how a software solution would improve over a more user based solution? I don't think there will be a lot of point managing the facility as it's just a school gym that's rented out. If there's more involved than just a fee I don't know if it would be worthwhile modelling. 2, 3 and 4 however sound like a great idea.

2. This is where the meat will be I think! Essentially a booking system (Which many exist, I know!) except with emphasis on table tennis. The methods of capturing player intent sound good - an App, Website, SMS or Phone Call (Possibly through Website/App Admin?). We should probably assume that the Website is the way to go to cut back on scope a bit. OR at least to satisfy the MVP (Minimum Viable Product) - Essentially getting the client off the ground and giving them the option of adding more value in the future via an App or other methods. I think a Bounded Context to manage Bookings and Cancellations would definitely be a part of the solution. 'Player Matching' is probably going to be the major strength of the solution. I doubt anyone else really offers this well.

3. I'm not sure what system would be best for Table Tennis, perhaps we can write a simple system similar to Chess ELO's? It would need to be flexible enough to allow Ad Hoc pairing of players as it's not formal enough to set up matches. Players come whenever they feel like it. This should also be a part of the system. Might as well write our own ranking system for the project's sake. It does overlap with 2d - Player matching.

4. Would be of huge use from what I can see. I've noticed Paul's friend who helps take notes on which players arrived and takes their payments. Usually they'll hand over $20 and he'll give them $2 change. He also offers water bottles and snacks (suspiciously around $2!). Each time I've gone, I've wired them over $18 and shown them the confirmation transaction on my phone. They don't seem particularly bothered or take much note. Mostly the Honour system I think. I think this should definitely be a part of the solution though!

5. Business Rules, Condition and Invariants can be a little hard to work out without a bit of modelling and thought. Even something as simple as "There cannot be more people booked than there are 4 times the tables available" can be a little tricky as there may be cases of reserve players or other attendees. But just having asked that question we actually help refine the model better. We might just have to see what we can find when further into modelling.

So we have a basic idea here but it's obviously not fleshed out too well but let's not worry too much about that at this stage! Once the client (me!) can see the details more feedback will be available. 
Next steps:
What are the Bounded Contexts called and what are their primary responsibilities?
What are some of the keywords/components in each Bounded Context?
How might these evolve into Entities?
What technical assets might we need? Website hosting? Database hosting? Programming Language? (Python is fine, obviously)
Should we perhaps find some design assets to assist as well? SCRUM Boards? Graphical Modelling tool? Something for us to communicate the ideas between the team (us, hehe) and client (me!)
Theoretically, How might you approach costing on this? What might we get revenue for this?

As you might imagine, creating software from scratch is like 50% coding and the rest is this. Found a good source on DDD?

Cheers,
Joel
